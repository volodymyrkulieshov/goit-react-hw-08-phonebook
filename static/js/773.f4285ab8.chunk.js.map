{"version":3,"file":"static/js/773.f4285ab8.chunk.js","mappings":"0OAAaA,EAAoB,SAAAC,GAAK,OAAIA,EAAMC,QAAS,EAI5CC,EAAe,SAAAF,GAAK,OAAIA,EAAMG,MAAO,EAErCC,EAAyB,SAAAJ,GACpC,IAAQC,EAAaF,EAAkBC,GAA/BC,SACFE,EAASD,EAAaF,GAC5B,GAAKG,EAEE,CACL,IAAME,EAAmBF,EAAOG,cAC1BC,EAAmBN,EAASE,QAChC,SAAAK,GAAA,IAAGC,EAAID,EAAJC,KAAMC,EAAMF,EAANE,OAAM,OACbD,EAAKH,cAAcK,OAAOC,SAASP,IACnCK,EAAOC,OAAOC,SAASP,EAAiB,IAM5C,OAHIA,IAAqBE,EAAiBM,QACxCC,MAAM,qCAEDP,CACT,CAbE,OAAON,CAcX,ECvBA,EAA8B,iCAA9B,EAAuE,2BAAvE,EAA0G,2BAA1G,EAA8I,4B,SC2F9I,EArFoB,WAClB,IAAAc,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BN,EAAIQ,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAA4BJ,EAAAA,EAAAA,UAAS,IAAGK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAAjCV,EAAMW,EAAA,GAAEC,EAASD,EAAA,GAEhBpB,GAAasB,EAAAA,EAAAA,IAAYxB,GAAzBE,SACFuB,GAAWC,EAAAA,EAAAA,MAGXC,EAAe,SAAAC,GACnB,IAAAC,EAAwBD,EAAEE,OAAlBpB,EAAImB,EAAJnB,KAAMqB,EAAKF,EAALE,MAEd,OAAQrB,GACN,IAAK,OACHU,EAAQW,GACR,MAEF,IAAK,SACHR,EAAUQ,GACV,MAEF,QACE,OAEN,EAsBMC,EAAY,WAChBZ,EAAQ,IACRG,EAAU,GACZ,EAEA,OACEU,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,QAAMC,UAAWC,EAAiBC,SA3BjB,SAAAX,GACnBA,EAAEY,iBAEF,IAAMC,EAAiB/B,EAAKH,cAM5B,GAJgBL,EAASwC,MACvB,SAAAC,GAAE,OAAIA,EAAGjC,KAAKH,gBAAkBkC,CAAc,IAO9C,OAHA1B,MAAM,GAAD6B,OAAIlC,EAAI,6BACbU,EAAQ,SACRG,EAAU,IAGZE,GAASoB,EAAAA,EAAAA,IAAgB,CAAEC,IAAIC,EAAAA,EAAAA,MAAUrC,KAAAA,EAAMC,OAAAA,KAC/CI,MAAM,WAAD6B,OAAYlC,EAAI,qCACrBsB,GACF,EAS6DG,SAAA,EACvDF,EAAAA,EAAAA,KAAA,SAAOI,UAAWC,EAAWU,QAAQ,UAASb,SAAC,UAG/CF,EAAAA,EAAAA,KAAA,SACEI,UAAWC,EACX5B,KAAK,OACLuC,KAAK,OACLH,GAAG,qBACH,mBAAiB,YACjBf,MAAOrB,EACPwC,SAAUvB,EACVwB,UAAQ,KAEVlB,EAAAA,EAAAA,KAAA,SAAOI,UAAWC,EAAWU,QAAQ,UAASb,SAAC,YAG/CF,EAAAA,EAAAA,KAAA,SACEI,UAAWC,EACXW,KAAK,MACLvC,KAAK,SACLqB,MAAOpB,EACPuC,SAAUvB,EACVwB,UAAQ,KAEVlB,EAAAA,EAAAA,KAAA,UAAQI,UAAWC,EAAYW,KAAK,SAAQd,SAAC,oBAMrD,ECzFA,EAA8B,iCAA9B,EAAyE,6BAAzE,EAAqH,kCCkCrH,EA9BoB,WAClB,IAAMjC,GAAWsB,EAAAA,EAAAA,IAAYnB,GAEvBoB,GAAWC,EAAAA,EAAAA,MAMjB,OACEO,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEF,EAAAA,EAAAA,KAAA,MAAII,UAAWC,EAAgBH,SAC5BjC,EAASkD,KAAI,SAAA3C,GAA2B,IAAxBC,EAAID,EAAJC,KAAMC,EAAMF,EAANE,OAAQmC,EAAErC,EAAFqC,GAC7B,OACEV,EAAAA,EAAAA,MAAA,MAAIC,UAAWC,EAAYH,SAAA,CACxBzB,EAAK,MAAEuB,EAAAA,EAAAA,KAAA,QAAAE,SAAOxB,KACfsB,EAAAA,EAAAA,KAAA,UACEI,UAAWC,EACXW,KAAK,SACLI,QAAS,kBAdC,SAACP,EAAIpC,GAE3B,OADAe,GAAS6B,EAAAA,EAAAA,IAAmBR,IACrB/B,MAAM,WAAD6B,OAAYlC,EAAI,wCAC9B,CAW6B6C,CAAgBT,EAAIpC,EAAK,EAACyB,SAC1C,aAN8BW,EAWrC,OAIR,E,UCjCA,EAA6B,2BAA7B,EAAsE,4BAAtE,EAAgH,4BCM1GU,GAAgBT,EAAAA,EAAAA,MA6BtB,EA3Be,WACb,IAAMU,GAAcjC,EAAAA,EAAAA,IAAYrB,GAC1BsB,GAAWC,EAAAA,EAAAA,MAQjB,OACEO,EAAAA,EAAAA,KAAA,QAAMI,UAAWC,EAAeH,UAC9BC,EAAAA,EAAAA,MAAA,SAAOC,UAAWC,EAAgBH,SAAA,CAAC,yBAEjCF,EAAAA,EAAAA,KAAA,SACEI,UAAWC,EACXQ,GAAIU,EACJP,KAAK,OACLlB,MAAO0B,EACPP,SAfU,SAAAQ,GAChB,IAAMC,EAAkBD,EAAM5B,OAAOC,MAAMxB,cAE3CkB,GAASmC,EAAAA,EAAAA,GAAaD,GACxB,EAYQE,YAAY,eAKtB,ECpBA,EAVqB,WACnB,OACEzB,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAC6B,EAAW,KACZ7B,EAAAA,EAAAA,KAAC8B,EAAM,KACP9B,EAAAA,EAAAA,KAAC+B,EAAW,MAGlB,C","sources":["redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const selectAllContacts = state => state.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = state => {\n  const { contacts } = selectAllContacts(state);\n  const filter = selectFilter(state);\n  if (!filter) {\n    return contacts;\n  } else {\n    const normalizedFilter = filter.toLowerCase();\n    const filteredContacts = contacts.filter(\n      ({ name, number }) =>\n        name.toLowerCase().trim().includes(normalizedFilter) ||\n        number.trim().includes(normalizedFilter)\n    );\n\n    if (normalizedFilter && !filteredContacts.length) {\n      alert('No contacts matching your request');\n    }\n    return filteredContacts;\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { addContactThunk } from '../../redux/contacts/contactsThunks';\nimport { selectAllContacts } from '../../redux/contacts/selectors';\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const { contacts } = useSelector(selectAllContacts);\n  const dispatch = useDispatch();\n\n  // console.log('contacts', contacts)\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const normalizedName = name.toLowerCase();\n\n    const isAdded = contacts.find(\n      el => el.name.toLowerCase() === normalizedName\n    );\n\n    if (isAdded) {\n      alert(`${name}: is already in contacts`);\n      setName('');\n      setNumber('');\n      return;\n    }\n    dispatch(addContactThunk({ id: nanoid(), name, number }));\n    alert(`Contact ${name} has been added to your Contacts`);\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <form className={css.contactForm} onSubmit={handleSubmit}>\n        <label className={css.label} htmlFor=\"example\">\n          Name\n        </label>\n        <input\n          className={css.input}\n          name=\"name\"\n          type=\"text\"\n          id=\"exampleInputEmail1\"\n          aria-describedby=\"emailHelp\"\n          value={name}\n          onChange={handleChange}\n          required\n        />\n        <label className={css.label} htmlFor=\"example\">\n          Number\n        </label>\n        <input\n          className={css.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          required\n        />\n        <button className={css.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contact\":\"ContactList_contact__0STHS\",\"deleteButton\":\"ContactList_deleteButton__3hT3n\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContactThunk } from '../../redux/contacts/contactsThunks';\nimport { selectFilteredContacts } from '../../redux/contacts/selectors';\nimport css from './ContactList.module.css';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n  // console.log('contacts', contacts);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = (id, name) => {\n    dispatch(deleteContactThunk(id));\n    return alert(`Contact ${name} has been deleted from your Contacts`);\n  };\n  return (\n    <>\n      <ul className={css.contactList}>\n        {contacts.map(({ name, number, id }) => {\n          return (\n            <li className={css.contact} key={id}>\n              {name}: <span>{number}</span>\n              <button\n                className={css.deleteButton}\n                type=\"button\"\n                onClick={() => onDeleteContact(id, name)}\n              >\n                Delete\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterForm\":\"Filter_filterForm__+l+6Q\",\"filterLabel\":\"Filter_filterLabel__+pnW-\",\"filterInput\":\"Filter_filterInput__1Cysk\"};","import React from 'react';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from '../../redux/contacts/selectors';\nimport { changeFilter } from '../../redux/contacts/filterSlice';\nimport css from './Filter.module.css';\n\nconst filterInputId = nanoid();\n\nconst Filter = () => {\n  const filterValue = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const setFilter = event => {\n    const normalizedValue = event.target.value.toLowerCase();\n\n    dispatch(changeFilter(normalizedValue));\n  };\n\n  return (\n    <form className={css.filterForm}>\n      <label className={css.filterLabel}>\n        Find contacts by name\n        <input\n          className={css.filterInput}\n          id={filterInputId}\n          type=\"text\"\n          value={filterValue}\n          onChange={setFilter}\n          placeholder=\"Search\"\n        />\n      </label>\n    </form>\n  );\n};\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nconst ContactsPage = () => {\n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectAllContacts","state","contacts","selectFilter","filter","selectFilteredContacts","normalizedFilter","toLowerCase","filteredContacts","_ref","name","number","trim","includes","length","alert","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","useSelector","dispatch","useDispatch","handleChange","e","_e$target","target","value","resetForm","_jsx","_Fragment","children","_jsxs","className","css","onSubmit","preventDefault","normalizedName","find","el","concat","addContactThunk","id","nanoid","htmlFor","type","onChange","required","map","onClick","deleteContactThunk","onDeleteContact","filterInputId","filterValue","event","normalizedValue","changeFilter","placeholder","ContactForm","Filter","ContactList"],"sourceRoot":""}